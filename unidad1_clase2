/* Documento: Unidad I.playground
 * Autor: Cristian Tafolla Rosales
 * Asignatura: Swift Intermedio
 * Semestre: 2019 - 2 */

import UIKit

/* Antes que nada, es necesario decir que comentar√© este c√≥digo como muchos otros
 * utilizando algunas notaciones sencillas*/

// Este es un comentario de una l√≠nea

/* Constantes y variables
 
 * En ambos casos, son espacios reservados en la memoria principal del equipo.
 * Las constantes y las variables son utilizadas para asociar un nombre con un valor.

 * Constante: Tiene un valor ajustado que no requiere que sea cambiado durante el
 * "tiempo de vida" de un programa.
 * Podemos definir las constantes con la palabra reservada let, como en el siguiente
 * ejemplo: */

let curso = "Swift Intermedio"

/* La sentencia anterior nos indica que existir√° una nueva constante llamada curso
 * y se le asigno el valor Swift Intermedio a dicha constante.

 * En la siguiente l√≠nea imprimiremos el valor de dicha constante, la cu√°l aparecer√°
 * en la consola que se encuentra en la parte inferior de nuestra ventana activa.:*/

print (curso)

/* Variable: En caso de requerir un valor que cambie durante la ejecuci√≥n del programa,
 * utilizamos una variable.
 * Podemos declarar las variables con la palabra reservada var, como en el siguiente
 * ejemplo: */

var numeroAlumnos = 23

/* Al guardar los valores, vemos que tenemos que brindarle un nombre diferente a cada
 * uno, como por ejemplo: */

var saludo = "Hola"
var –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ = "–ø—Ä–∏–≤–µ—Ç"
var ÂÆ£Ë®Ä = "ÁßÅ„ÅØ„ÅÇ„Å™„Åü„ÇíÊÑõ„Åó„Å¶„ÅÑ„Çã"
var üòÑ = "Feliz"

/* Pero lo ideal ser√≠a nombrar las variables con un lenguaje entendible por el grupo
 * de personas que pudisesen verlo, claro, que si queremos que sea algo universal
 * tendremos que utilizar el ingl√©s, y adicionalmente utilizaremos una notaci√≥n
 * denominada CamelCase.
 * La notaci√≥n CamelCase separa cada palabra con una may√∫scula, y no con espacios
 * entre las palabras. Hay dos formas de utilizarla: */

var numeroAlumnosAprobados = 20 // Utiliza lowerCamelCase

var NumeroAlumnosReprobados = 1 // Utiliza UpperCamelCase

// Lo mejor es utilizar lowerCamelCase.


/* Cabe recalcar que no necesariamente se tiene que imprimir el valor de una variable
 * o constante sola, sino que tambi√©n podemos agregar texto de manera contigua.
 * utilizaremos los s√≠mbolos \() , y en medio de los par√©ntesis podremos el nombre del
 * espacio de memoria reservado. Esto se llama interpolaci√≥n. */

print ("Actualmente hay \(numeroAlumnos) alumnos inscritos")

/* Suponiendo que esta variable corresponda al n√∫mero de alumnos que el curso tiene y
 * alguno llega a darse de baja, entonces podr√≠amos cambiar el valor de dicha variable
 * de la siguiente forma: */

numeroAlumnos = 22
print ("Actualmente hay \(numeroAlumnos) alumnos inscritos")

/* Tambi√©n podemos declarar multiples constantes o variables en la misma l√≠nea.*/

let alumnoUno = "Alejandro", alumnoDos = "Julieta", alumnoTres = "Ariel"
var equipoUno = "Ocupado", equipoDos = "Desocupado", equipoTres = "En mantenimiento"

/* Si quisieramos cambiar el valor de una constante, veremos que saldr√° un error.
 * Descomenta la l√≠nea de abajo y observa todo lo que aparece. */

//curso = "Teor√≠a del meme"

/* Como vimos, no es posible cambiar el valor de alguno de las constantes.*/

/* Tipos de datos
 * Los tipos de datos m√°s comunes en Swft son los siguientes:
 
 * Tipo de dato         Palabra reservada           Prop√≥sito
 
 * Entero               Int                         Representa n√∫meros enteros
 * Flotantes            Float                       Representa n√∫meros con punto
 *                                                  decimal
 * Double               Double                      Representa n√∫meros con punto
 *                                                  decimal, con el doble de
 *                                                  precisi√≥n que los flotantes
 * Booleano             Bool                        Representa dos valores:
 *                                                  verdadero y falso
 * Cadena               String                      Representa texto
 
 * Nosotros podemos ver ejemplos en la parte de abajo: */

var entero: Int = 4
var flotante: Float = 4.66666666666
var double: Double = 4.666666666666
var booleano: Bool = true
var cadena: String = "iOS Dev Lab"

/* Al agregar nosotros el tipo de la variable que estamos definiendo, hacemos que
 * nuestra variable tenga tipado fuerte, pero, ¬øqu√© tal si nosotros no definimos
 * ese tipo? */

var materiaReprobada = "Matem√°ticas financieras"

/* Aqu√≠ utilizamos la inferencia de tipo, donde vemos que no es necesario que
 * agreguemos el tipo, aunque lo mejor ser√≠a que lo hicieramos üôÉ*/

/* Se nos presenta el siguiente problema:
 
 * "La poblaci√≥n en M√©xico ascend√≠a a los 119,938,473 habitantes." (INEGI, 2015)
 
 * Si requiero guardar esa informaci√≥n en una variable, lo hago de esta manera: */

var habitantesMexico: Int = 119938473

/* Lo anterior no me permite leer f√°cilmente el n√∫mero de habitantes, pues estamos
 * acostumbrados a leer las cantidades con comas que separan por miles. Bien,
 * Swift puede permitirnos hacer lo siguiente:
 
 * "Para 2019, la poblaci√≥n en M√©xico aument√≥ a 133,337,506 habitantes." (CountryMeters, 2019)
 
 * Ahora hay que guardar dicha informaci√≥n en la variable: */

habitantesMexico = 133_337_526

/* Dicha notaci√≥n no cambiar√° el tipo de la variable que ocup√°bamos con anterioridad
 * y, como vemos, es m√°s f√°cil leerla ahora.*/

/* Operadores
 
 * Operadores aritm√©ticos:
 
 * Ahora hagamos algo diferente. Tenemos la siguiente informaci√≥n:
 
 * "La poblaci√≥n masculina actual del pa√≠s es de 65,757,788 habitantes, correspondiente
 * al 49.3%." (CountryMeters, 2019)
 
 * Necesitamos saber ahora cu√°ntas mujeres hay actualmente en M√©xico. */

var habitantesMujeres: Int = habitantesMexico - 65_757_788

/* Veremos en la barra lateral de resultados que actualmente hay en M√©xico 67,579,738
 * mujeres. Despu√©s nos dan m√°s informaci√≥n:
 
 * "La poblaci√≥n femenina en M√©xico corresponde al 50.7% del total." (CountryMeters, 2019)
 
 * Necesitamos hacer el c√°lculo para saber si es cierta esta afimaci√≥n. */

50.7 + 49.3

/* Tambi√©n nos solicitan cu√°ntos habitantes hay por kil√≥metro cuadrado en el pa√≠s,
 * teniendo el siguiente dato:
 
 * "La extensi√≥n de la superficie continental de M√©xico es de 1,960,189 kil√≥metros
 * cuadrados" (INEGI, 2010) */

var superficieMexico: Int = 1_960_189

var densidadPoblacionMexico: Float

// Descomenta la l√≠nea de abajo, y ver√°s que hay un error, aunque l√≥gicamente est√° bien

// densidadPoblacionMexico = habitantesMexico / superficieMexico

/* Es importante recalcar que obtendr√°s un valor con punto decimal, as√≠ que se usa un
 * casteo, que es una forma de que le indiquemos al compilador que haremos una conversi√≥n
 * para no perder informaci√≥n que nos pueda ser √∫til o que hayan problemas en nuestro
 * programa. Lo utilizamos de la siguiente forma: */

densidadPoblacionMexico = Float (habitantesMexico / superficieMexico)

// Vemos que hay 68 personas por kil√≥metro cuadrado, aproximadamente.

/* Nos brindan m√°s informaci√≥n:
 
 * "La densidad de carreteras en el pa√≠s corresponde a los 19 kil√≥metros por kil√≥metro
 * cuadrado" (SEMARNAT, 2015).

 * Hagamos otra operaci√≥n. */

var densidadCarreterasMexico: Int = 19

var carreterasMexico: Int = densidadCarreterasMexico * superficieMexico

/* Asignaci√≥n compuesta
 
 * Suponiendo que en lo que llevamos hablando aument√≥ la poblaci√≥n en M√©xico otros 50
 * habitantes, habr√° que actualizar la variable. */

habitantesMexico = habitantesMexico + 50

/* Pero aument√≥ otro m√°s, aunque nos da un poco de flojera escribir todo de nuevo, as√≠
 * que optamos por la siguiente operaci√≥n: */

habitantesMexico += 1

/* Suponiendo que a alguien lo atropell√≥ un perro, tendremos que disminuir la poblaci√≥n
 * un habitante */

habitantesMexico -= 1

/* Si quisieramos saber cu√°ntos habitantes habr√≠a en caso de duplicarse la poblaci√≥n,
 * har√≠amos lo siguiente: */

habitantesMexico *= 2

/* Pero como no es el caso, hay que regresar a la normalidad: */

habitantesMexico /= 2
